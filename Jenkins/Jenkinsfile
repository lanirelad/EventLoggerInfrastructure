pipeline 
{
    agent any

    environment 
    {
        DOCKER_IMAGE = 'lanirelad/push-event-logger:latest'
        LINODE_INSTANCE_IP = '' // This will be populated by Terraform outputs
        FLASK_APP_REPO = 'https://github.com/lanirelad/push-event-logger.git'
        INFRA_REPO = 'https://github.com/lanirelad/EventLoggerInfrastructure.git'
        LINODE_API_TOKEN = credentials('linodeToken')  
        SSH_PUBLIC_KEY = credentials('sshKey')        
        ROOT_PASSWORD = credentials('rootPass')
        GIT_TOKEN = credentials('githubToken')
        SUDO_PASSWORD = credentials('sudoPass')
    }

    stages 
    {
        stage('Checkout Flask App Code') 
        {
            steps 
            {
                // Clone the Flask app repository
                git branch: 'main', url: "${FLASK_APP_REPO}"
            }
        }

        stage('Build Docker Image') 
        {
            steps 
            {
                // Build the Docker image
                script 
                {
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }

        stage('Push Docker Image') 
        {
            steps 
            {
                // Push the image to Docker Hub
                script 
                {
                    // Using withCredentials to bind Docker Hub credentials
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                      usernameVariable: 'DOCKER_USERNAME', 
                                                      passwordVariable: 'DOCKER_PASSWORD')]) 
                    {
                        // Log in to Docker Hub
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        // Push the image
                        sh 'docker push $DOCKER_IMAGE'
                    }
                }
            }
        }

        stage('Checkout Infrastructure Code') 
        {
            steps 
            {
                // Clone the infrastructure repository
                git branch: 'main', url: "${INFRA_REPO}"
            }
        }

        stage('Terraform Init') 
        {
            steps 
            {
                // Initialize Terraform
                dir('Terraform') 
                {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') 
        {
            steps 
            {
                // Plan the Terraform changes
                dir('Terraform') 
                {
                    
                    
                    sh '''
                    terraform plan -out=tfplan\
                    -var "linodeToken=${LINODE_API_TOKEN}" \
                    -var "sshKey=${SSH_PUBLIC_KEY}" \
                    -var "rootPass=${ROOT_PASSWORD}"\
                    -var "githubToken=${GIT_TOKEN}"
                    '''
                }
            }
        }

        stage('Terraform Apply') 
        {
            steps 
            {
                // Apply the Terraform changes
                dir('Terraform') 
                {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Debug Terraform Outputs') 
        {
            steps 
            {
                dir('Terraform') 
                {
                    script {
                        // Output all Terraform outputs and store IP in a file
                        sh 'terraform output -raw linode_public_ip > linode_ip.txt'
                    }
                }
            }
        }

        stage('Get Linode IP') 
        {
            steps 
            {
                dir('Terraform') 
                {
                    script 
                    {
                        LINODE_INSTANCE_IP = readFile('linode_ip.txt').trim()
                        echo "Linode Instance IP: ${LINODE_INSTANCE_IP}"
                    }
                }
            }
        }

        stage('Copy public SSH key') 
        {
            steps 
            {
                script 
                {
                    withCredentials([string(credentialsId: 'rootPass', variable: 'ROOT_PASSWORD')]) 
                    {
                        sh """ \
                        ssh-keyscan -H ${LINODE_INSTANCE_IP} >> /var/lib/jenkins/.ssh/known_hosts \
                        echo "\${ROOT_PASSWORD}" | ssh-copy-id root@${LINODE_INSTANCE_IP} \
                        """
                    }
                }
            }
        }

        stage('Create Ansible Inventory') 
        {
            steps 
            {
                dir('Ansible')
                {
                    script 
                    {
                        // Write the inventory file with the Linode instance's IP
                        def inventoryContent = """
                        [linode]
                        ${LINODE_INSTANCE_IP} 

                        [linode:vars]
                        ansible_ssh_user=root
                        ansible_ssh_private_key_file=/var/lib/jenkins/.ssh/id_rsa
                        """
                        writeFile file: 'inventory.ini', text: inventoryContent
                    }
                }
            }
        }

        // stage('Copy Public Key to Authorized Keys') 
        // {
        //     steps 
        //     {
        //         script 
        //         {
        //             sh """ \
        //                 PUB_KEY=\$(cat /var/lib/jenkins/.ssh/id_ed25519.pub) \
        //                 ssh root@${LINODE_INSTANCE_IP} "echo \$PUB_KEY >> ~/.ssh/authorized_keys" \
        //             """
        //         }
        //     }
        // }

        // stage('Setup Authorized Keys') 
        // {
        //     steps 
        //     {
        //         dir('Ansible') 
        //         {
        //             script {
        //                 def pubKeyContent = readFile('/home/vagrant/.ssh/id_ed25519.pub').trim()
        //                 // Create a temporary playbook file to add the public key
        //                 def addKeyPlaybook = """
        //                 - name: Add public key to authorized_keys
        //                   hosts: linode
        //                   become: true
        //                   tasks:
        //                     - name: Ensure public key is in authorized_keys
        //                       ansible.builtin.authorized_key:
        //                         user: root
        //                         key: "${pubKeyContent}"
        //                 """
        //                 writeFile file: 'add_key.yml', text: addKeyPlaybook
        //                 // Run the temporary playbook to add the public key
        //                 sh "ansible-playbook -i ../inventory.ini add_key.yml"
        //             }
        //         }
        //     }
        // }


        stage('Run Ansible Playbook') 
        {
            steps 
            {
                // Run the Ansible playbook to configure the Linode instance
                dir('Ansible') 
                {
                    sh "ansible-playbook -i ./inventory.ini playbook.yml"
                }
            }
        }
    }

    post 
    {
        success 
        {
            echo 'Deployment completed successfully!'
        }
        failure 
        {
            echo 'Deployment failed. Check the logs for details.'
        }
    }
}