pipeline 
{
    agent any

    environment 
    {
        DOCKER_IMAGE = 'lanirelad/push-event-logger:latest'
        LINODE_INSTANCE_IP = '' // This will be populated further on the page
        FLASK_APP_REPO = 'https://github.com/lanirelad/push-event-logger.git'
        INFRA_REPO = 'https://github.com/lanirelad/EventLoggerInfrastructure.git'
        LINODE_API_TOKEN = credentials('linodeToken')  
        SSH_PUBLIC_KEY = credentials('sshKey')        
        ROOT_PASSWORD = credentials('rootPass')
        GIT_TOKEN = credentials('githubToken')
        SUDO_PASSWORD = credentials('sudoPass')
    }

    stages 
    {
        stage('Checkout Flask App Code') 
        {
            steps 
            {
                // Clone the Flask app repository
                git branch: 'main', url: "${FLASK_APP_REPO}"
            }
        }

        stage('Clean up Previous Container') 
        {
            steps 
            {
                script 
                {
                    // Stop and remove any existing container
                    sh 'docker-compose down || true'
                }
            }
        }

        stage('Build Docker Image') 
        {
            steps 
            {
                script 
                {
                    // Build the Docker image
                    sh 'docker build --no-cache -t $DOCKER_IMAGE .'
                }
            }
        }

        stage('Push Docker Image') 
        {
            steps 
            {
                script 
                {
                    // Push the image to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                      usernameVariable: 'DOCKER_USERNAME', 
                                                      passwordVariable: 'DOCKER_PASSWORD')]) 
                    {
                        // Log in to Docker Hub
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        // Push the image
                        sh 'docker push $DOCKER_IMAGE'
                    }
                }
            }
        }

        stage('Checkout Infrastructure Code') 
        {
            steps 
            {
                // Clone the infrastructure repository
                git branch: 'main', url: "${INFRA_REPO}"
            }
        }

        stage('Terraform Init') 
        {
            steps 
            {
                dir('Terraform') 
                {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') 
        {
            steps 
            {
                dir('Terraform') 
                {
                    sh '''
                    terraform plan -out=tfplan \
                    -var "linodeToken=${LINODE_API_TOKEN}" \
                    -var "sshKey=${SSH_PUBLIC_KEY}" \
                    -var "rootPass=${ROOT_PASSWORD}" \
                    -var "githubToken=${GIT_TOKEN}"
                    '''
                }
            }
        }

        stage('Terraform Apply') 
        {
            steps 
            {
                dir('Terraform') 
                {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Debug Terraform Outputs') 
        {
            steps 
            {
                dir('Terraform') 
                {
                    script 
                    {
                        // Output all Terraform outputs and store IP in a file
                        sh 'terraform output -raw linode_public_ip > linode_ip.txt'
                    }
                }
            }
        }

        stage('Get Linode IP') 
        {
            steps 
            {
                dir('Terraform') 
                {
                    script 
                    {
                        LINODE_INSTANCE_IP = readFile('linode_ip.txt').trim()
                        echo "Linode Instance IP: ${LINODE_INSTANCE_IP}"
                    }
                }
            }
        }

        stage('Copy public SSH key') 
        {
            steps 
            {
                script 
                {
                    withCredentials([string(credentialsId: 'rootPass', variable: 'ROOT_PASSWORD')]) 
                    {
                        // Add host to known_hosts
                        sh """
                        ssh-keyscan -H ${LINODE_INSTANCE_IP} >> /var/lib/jenkins/.ssh/known_hosts || true
                        """
                        
                        // Copy the public key to authorized_keys on the remote server
                        sh """
                        echo "\${ROOT_PASSWORD}" | ssh -o StrictHostKeyChecking=no -v root@${LINODE_INSTANCE_IP} "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys" < /var/lib/jenkins/.ssh/id_rsa.pub
                        """
                    }
                }
            }
        }

        stage('Create Ansible Inventory') 
        {
            steps 
            {
                dir('Ansible') 
                {
                    script 
                    {
                        def inventoryContent = """
                        [linode]
                        ${LINODE_INSTANCE_IP} 

                        [linode:vars]
                        ansible_ssh_user=root
                        ansible_ssh_private_key_file=/var/lib/jenkins/.ssh/id_rsa
                        """
                        writeFile file: 'inventory.ini', text: inventoryContent
                    }
                }
            }
        }

        stage('Run Ansible Playbook') 
        {
            steps 
            {
                dir('Ansible') 
                {
                    sh "ansible-playbook -i ./inventory.ini playbook.yml -vvv"
                }
            }
        }

        post 
        {
            success 
            {
                echo 'Deployment completed successfully!'
            }
            failure 
            {
                echo 'Deployment failed. Check the logs for details.'
            }
        }
    }
}
